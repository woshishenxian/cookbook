package com.nanke.cook.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD".
*/
public class FoodDao extends AbstractDao<Food, Long> {

    public static final String TABLENAME = "FOOD";

    /**
     * Properties of entity Food.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FoodId = new Property(0, long.class, "foodId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Infoclass = new Property(3, int.class, "infoclass", false, "INFOCLASS");
        public final static Property Img = new Property(4, String.class, "img", false, "IMG");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Keywords = new Property(6, String.class, "keywords", false, "KEYWORDS");
        public final static Property Message = new Property(7, String.class, "message", false, "MESSAGE");
        public final static Property Count = new Property(8, int.class, "count", false, "COUNT");
        public final static Property Fcount = new Property(9, int.class, "fcount", false, "FCOUNT");
        public final static Property Rcount = new Property(10, int.class, "rcount", false, "RCOUNT");
        public final static Property Disease = new Property(11, String.class, "disease", false, "DISEASE");
        public final static Property Food = new Property(12, String.class, "food", false, "FOOD");
        public final static Property Summary = new Property(13, String.class, "summary", false, "SUMMARY");
        public final static Property IsCollected = new Property(14, boolean.class, "isCollected", false, "IS_COLLECTED");
    };


    public FoodDao(DaoConfig config) {
        super(config);
    }
    
    public FoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: foodId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"NAME\" TEXT," + // 2: name
                "\"INFOCLASS\" INTEGER NOT NULL ," + // 3: infoclass
                "\"IMG\" TEXT," + // 4: img
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"KEYWORDS\" TEXT," + // 6: keywords
                "\"MESSAGE\" TEXT," + // 7: message
                "\"COUNT\" INTEGER NOT NULL ," + // 8: count
                "\"FCOUNT\" INTEGER NOT NULL ," + // 9: fcount
                "\"RCOUNT\" INTEGER NOT NULL ," + // 10: rcount
                "\"DISEASE\" TEXT," + // 11: disease
                "\"FOOD\" TEXT," + // 12: food
                "\"SUMMARY\" TEXT," + // 13: summary
                "\"IS_COLLECTED\" INTEGER NOT NULL );"); // 14: isCollected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Food entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFoodId());
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getInfoclass());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(7, keywords);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(8, message);
        }
        stmt.bindLong(9, entity.getCount());
        stmt.bindLong(10, entity.getFcount());
        stmt.bindLong(11, entity.getRcount());
 
        String disease = entity.getDisease();
        if (disease != null) {
            stmt.bindString(12, disease);
        }
 
        String food = entity.getFood();
        if (food != null) {
            stmt.bindString(13, food);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(14, summary);
        }
        stmt.bindLong(15, entity.getIsCollected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Food entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFoodId());
        stmt.bindLong(2, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getInfoclass());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(7, keywords);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(8, message);
        }
        stmt.bindLong(9, entity.getCount());
        stmt.bindLong(10, entity.getFcount());
        stmt.bindLong(11, entity.getRcount());
 
        String disease = entity.getDisease();
        if (disease != null) {
            stmt.bindString(12, disease);
        }
 
        String food = entity.getFood();
        if (food != null) {
            stmt.bindString(13, food);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(14, summary);
        }
        stmt.bindLong(15, entity.getIsCollected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Food readEntity(Cursor cursor, int offset) {
        Food entity = new Food( //
            cursor.getLong(offset + 0), // foodId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // infoclass
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keywords
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // message
            cursor.getInt(offset + 8), // count
            cursor.getInt(offset + 9), // fcount
            cursor.getInt(offset + 10), // rcount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // disease
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // food
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // summary
            cursor.getShort(offset + 14) != 0 // isCollected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Food entity, int offset) {
        entity.setFoodId(cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInfoclass(cursor.getInt(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeywords(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCount(cursor.getInt(offset + 8));
        entity.setFcount(cursor.getInt(offset + 9));
        entity.setRcount(cursor.getInt(offset + 10));
        entity.setDisease(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFood(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSummary(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsCollected(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Food entity, long rowId) {
        entity.setFoodId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Food entity) {
        if(entity != null) {
            return entity.getFoodId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
